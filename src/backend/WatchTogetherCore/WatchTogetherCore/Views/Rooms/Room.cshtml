@model WatchTogetherCore.Models.Room
@using System.Text.Json


@{
    ViewBag.Title = "Комната просмотра видео";
    ViewBag.RoomName = Model.RoomName;              // Передаём динамическое название комнаты для шапки Layout
    ViewBag.InvitationLink = Model.InvitationLink;
    ViewBag.Description = Model.Description;
}

<!-- Основная разметка -->
<main class="main-content">
    @section Header {
        <!-- Шапка -->
        <header class="header">

            <div class="logo">WatchTogether</div>

            <div class="room-info">
                <h1 id="room-title">@ViewBag.RoomName</h1>
                <img src="~/icons/gear-icon.png" alt="Настройки" class="gear-icon" id="gear-icon" />
            </div>

            <div class="user-profile">
                <img src="~/icons/user-icon.png" alt="Профиль пользователя" />
            </div>
        </header>
    }

    <!-- Левая колонка: Видео-плеер -->
    <section class="video-section">
        <div id="video-player">
            <!-- Здесь будет интеграция YouTube плеера -->
        </div>

        <button id="add-video-btn" class="btn">+</button>
    </section>

    <!-- Правая колонка: Чат -->
    <section class="chat-section">
        <!-- Ссылка-приглашение -->
        <button id="invite-btn" class="btn">Invite</button>

        <div class="modal" id="modal">
            <div class="modal-content">
                <h2>Invite Link</h2>
                <div class="link-container">
                    <span id="inviteLink">@ViewBag.InvitationLink</span>
                    <button id="copy-btn">Copy</button>
                </div>
                <div id="notification" class="notification">Copied to clipboard!</div>
            </div>
        </div>


        <div id="chat-messages">
            <!-- Сообщения чата -->
        </div>

        <form id="chat-form">
            <input type="text" id="chat-input" placeholder="Введите сообщение..." />
            <button type="submit" class="btn">Отправить</button>
        </form>
    </section>

    <!-- Добавлено модальное окно для настроек комнаты, при нажатии на шестеренку -->
    <div class="modal" id="settings-modal">
        <div class="modal-content">
            <h2>Настройки комнаты</h2>
            <div class="form-group">
                <label for="room-name-input">Название комнаты:</label>
                <input type="text" id="room-name-input" @* value="@ViewBag.RoomName" *@ />
            </div>
            <div class="form-group">
                <label for="room-description-input">Описание:</label>
                <textarea id="room-description-input" @* placeholder="@ViewBag.Description" *@></textarea>
            </div>
            <div class="modal-buttons">
                <button id="save-settings-btn" class="btn">Сохранить</button>
                <button id="cancel-settings-btn" class="btn">Отмена</button>
            </div>
        </div>
    </div>
</main>


<!-- Стили -->
@section Styles
{
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background: #f9f9f9;
            color: #333;
        }

        /* Шапка */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 20px;
            background: #fff;
            border-bottom: 1px solid #ddd;
        }

            .header .logo {
                font-size: 1.5em;
                font-weight: bold;
            }

            .header .room-info {
                display: flex;
                align-items: center;
            }

            .header h1 {
                margin-right: 15px;
                font-size: 1.2em;
            }

        .btn {
            padding: 8px 12px;
            border: none;
            background: #007BFF;
            color: #fff;
            border-radius: 4px;
            cursor: pointer;
        }

        /* Настройка комнаты */
        .gear-icon {
            width: 20px;
            height: 20px;
            cursor: pointer;
            transition: opacity 0.3s;
        }

            .gear-icon:hover {
                opacity: 0.7;
            }

        .form-group {
            margin-bottom: 15px;
        }

            .form-group label {
                display: block;
                margin-bottom: 5px;
                font-weight: bold;
            }

            .form-group input,
            .form-group textarea {
                width: 100%;
                padding: 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
                resize: none;
            }

        .modal-buttons {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 20px;
        }


        /* Основной контент */
        .main-content {
            display: flex;
            height: calc(100vh - 120px); /* Вычитаем высоту шапки и футера */
        }

        .video-section {
            flex: 7;
            padding: 20px;
            position: relative;
        }

        #video-player {
            width: 100%;
            height: 100%;
            background: #000;
            border-radius: 8px;
            position: relative; /* Для абсолютного позиционирования кнопки внутри блока */
        }

        /* Ссылка-приглашение*/

        #invite-btn {
            padding: 15px 30px;
            font-size: 18px;
            cursor: pointer;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
        }

            #invite-btn:hover {
                background-color: #45a049;
            }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            width: 600px;
            text-align: center;
        }

        .link-container {
            display: flex;
            align-items: stretch; /* Растягиваем элементы по высоте */
            margin: 20px 0;
            gap: 10px; /* Добавляем отступ между элементами */
        }

        #inviteLink {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            word-wrap: break-word; /* Перенос длинных слов */
            overflow-wrap: break-word; /* Альтернатива для некоторых браузеров */
            min-height: 40px; /* Минимальная высота для одной строки */
            display: flex;
            align-items: center; /* Выравниваем текст по центру по вертикали */
        }

        #copy-btn {
            padding: 8px 15px;
            background-color: #008CBA;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            align-self: stretch; /* Растягиваем кнопку по высоте */
            height: auto; /* Разрешаем растягивание */
            min-width: 80px; /* Минимальная ширина */
            display: flex;
            align-items: center;
            justify-content: center;
            white-space: nowrap; /* Текст кнопки не переносится */
        }

        #copy-btn:hover {
            background-color: #007399;
        }

        .notification {
            color: #4CAF50;
            font-size: 14px;
            margin-top: 10px;
            display: none;
        }


        /* Центрирование круглой кнопки внутри видеоплеера */
        #add-video-btn {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 1.5em;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            border: none;
            background: #007BFF;
            color: #fff;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }


        /* Чат */
        .chat-section {
            flex: 3;
            padding: 20px;
            border-left: 1px solid #ddd;
            display: flex;
            flex-direction: column;
        }

        #chat-messages {
            flex: 1;
            overflow-y: auto;
            margin-bottom: 15px;
        }

        #chat-form {
            display: flex;
        }

        #chat-input {
            flex: 1;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        /* Подвал */
        .footer {
            margin: 0px;
            padding: 10px 20px;
            text-align: center;
            background: #fff;
            border-top: 1px solid #ddd;
            font-size: 0.9em;
        }
    </style>
}

<!-- Скрипты -->

@section Scripts
{
    <script>
        // Инициализация всех обработчиков
        document.addEventListener('DOMContentLoaded', () => {
            initModals();
            initClipboard();
            initRoomSettings();
        });


        // Функции работы с буфером обмена
        function initClipboard() {
            function copyToClipboard() {
                navigator.clipboard.writeText(document.getElementById('inviteLink').textContent)
                    .then(() => showNotification())
                    .catch(err => console.error('Ошибка копирования:', err));
            }

            function showNotification() {
                const notification = document.getElementById('notification');
                notification.style.display = 'block';
                setTimeout(() => notification.style.display = 'none', 2000);
            }

            document.getElementById('copy-btn').addEventListener('click', copyToClipboard);
        }


        // Обработчики модальных окон
        function initModals() {
            // Модалка приглашения
            document.getElementById('invite-btn').addEventListener('click', () => {
                document.getElementById('modal').style.display = 'flex';
            });

            // Закрытие по клику вне области
            window.addEventListener('click', (event) => {
                if (event.target === document.getElementById('modal')) {
                    document.getElementById('modal').style.display = 'none';
                }
            });

            // Модалка настроек
            document.getElementById('gear-icon').addEventListener('click', () => {
                const modal = document.getElementById('settings-modal');
                modal.style.display = 'flex';

                // Получаем текущие значения из интерфейса
                document.getElementById('room-name-input').value = document.getElementById('room-title').textContent;
                const descriptionElement = document.getElementById('room-description-input');
                document.getElementById('room-description-input').value = descriptionElement.value;
            });
        }

        // Инициализация настроек комнаты

        function initRoomSettings() {
            const roomId = '@Model.RoomId';

            // Обработчик сохранения настроек
            document.getElementById('save-settings-btn').addEventListener('click', async (e) => {
                e.preventDefault();

                const newRoomName = document.getElementById('room-name-input').value;
                const newDescription = document.getElementById('room-description-input').value;
                const userId = localStorage.getItem('userId');

                try {
                    const response = await fetch(`/api/Rooms/${roomId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-User-Id': userId         // Передаем UserId в заголовке
                        },
                        body: JSON.stringify({
                            RoomName: newRoomName,
                            Description: newDescription
                        })
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.Message || 'Ошибка сохранения');
                    }

                    const result = await response.json();

                    updateUIElements({
                        roomName: result.newRoomName,
                        description: result.newDescription
                    });


                    document.getElementById('settings-modal').style.display = 'none';

                } catch (error) {
                    console.error('Ошибка:', error);
                    alert(error.message || 'Не удалось сохранить настройки');
                }
            });

            // Обработчик отмены
            document.getElementById('cancel-settings-btn').addEventListener('click', () => {
                document.getElementById('settings-modal').style.display = 'none';
            });
        }

        // Обновление элементов интерфейса
        function updateUIElements(data) {
            // Обновляем название комнаты
            document.getElementById('room-title').textContent = data.roomName;

            // Обновляем описание комнаты
            const descriptionElement = document.getElementById('room-description-input');
            if (descriptionElement) {
                descriptionElement.textContent = data.description;
            }
        }
    </script>
}