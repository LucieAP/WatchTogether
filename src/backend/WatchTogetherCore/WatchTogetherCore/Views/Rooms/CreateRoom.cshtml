@{
    ViewData["Title"] = "Создание комнаты";
}

<div class="wrapper">
    <div class="container mt-5">
        <h2>Создать новую комнату</h2>
        <div class="card mt-4">
            <div class="card-body">
                <div class="form-group">
                    <label for="roomName">Название комнаты:</label>
                    <input type="text" id="roomName" class="form-control" required>
                </div>

                <div class="form-group mt-3">
                    <label for="description">Описание:</label>
                    <textarea id="description" class="form-control" rows="3" required></textarea>
                </div>

                <div class="form-group mt-3">
                    <label for="roomType">Тип комнаты:</label>
                    <select id="roomType" class="form-control" required>
                        <option value="0">Приватная</option>
                        <option value="1">Публичная</option>
                    </select>
                </div>

                <button class="btn btn-primary mt-4" id="createRoomBtn">Создать комнату</button>
            </div>
        </div>
    </div>
</div>

<script>
    async function createRoom() {
        const requestBody = {
            RoomName: document.getElementById('roomName').value,
            Description: document.getElementById('description').value,
            Status: parseInt(document.getElementById('roomType').value)
        };

        try {
            const response = await fetch('/api/Rooms/Create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.title || 'Ошибка сервера');
            }

            const result = await response.json();

            // Сохраняем UserId в localStorage
            if (result.user.userId) {
                localStorage.setItem('userId', result.user.userId);     // Сохранение для будущих запросов
                console.log('Комната создана, UserId сохранен:', result.user.userId);
            }

            const newRoomUrl = result.invitationLink;
            if (!newRoomUrl) {
                throw new Error('URL комнаты не найден');
            }
            // Передать UserId клиенту при создании комнаты и обеспечить его доступность в заголовке X-User-Id для последующих запросов
            const roomResponse = await fetch(newRoomUrl, {
                headers: {
                    'X-User-Id': result.user.userId // Добавляем заголовок
                }
            });

            window.location.href = result.invitationLink;

        } catch (error) {
            alert(`Ошибка: ${error.message}`);
            console.error('Error details:', error);
        }
    }

    // Назначение обработчика после загрузки DOM
    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('createRoomBtn').addEventListener('click', createRoom);
    });
</script>

<style>

    .wrapper {
        height: 100vh; /* Растягиваем контейнер на всю высоту окна */
        display: flex;
        justify-content: center; /* Центрируем по горизонтали */
        align-items: center;     /* Центрируем по вертикали */
    }


    .card {
        border-radius: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .form-control {
        border-radius: 8px;
        padding: 12px;
    }

    .btn {
        width: 100%;
        padding: 12px;
        border-radius: 8px;
        font-weight: 600;
    }
</style>
